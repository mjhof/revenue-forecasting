"ON SEMICONDUCTOR",
"NXP SEMICONDUCTORS",
"RAYTHEON TECHNOLOGIES",
"TRANE TECHNOLOGIES",
"TYLER TECHNOLOGIES",
"LUMEN TECHNOLOGIES",
"SOUTHERN",
"RAYTHEON TECHNOLOGIES",
"ROPER TECHNOLOGIES",
"TYLER TECHNOLOGIES",
"ZEBRA TECHNOLOGIES 'A'",
"LUMEN TECHNOLOGIES",
"RAYTHEON TECHNOLOGIES",
"ROPER TECHNOLOGIES",
"TRANE TECHNOLOGIES",
"FLEETCOR TECHNOLOGIES",
"LUMEN TECHNOLOGIES",
"UNITED PARCEL SER.'B'",
"UNITED RENTALS",
"RAYTHEON TECHNOLOGIES",
"ROPER TECHNOLOGIES",
"TRANE TECHNOLOGIES",
"TYLER TECHNOLOGIES",
"LUMEN TECHNOLOGIES"
)
)
companies_joined[(df_invalid_company_pairs$company.x %in% companies_joined$company.x)
,]#& (df_invalid_company_pairs$company.y %in% companies_joined$company.y),]
companies_joined[(df_invalid_company_pairs$company.x %in% companies_joined$company.x)
companies_joined[(df_invalid_company_pairs$company.x %in% companies_joined$company.x)
companies_joined[df_invalid_company_pairs$company.x %in% companies_joined$company.x, ]#& (df_invalid_company_pairs$company.y %in% companies_joined$company.y),]
companies_joined[companies_joined$company.x %in% df_invalid_company_pairs$company.x, ]#& (df_invalid_company_pairs$company.y %in% companies_joined$company.y),]
companies_joined[companies_joined$company.x %in% df_invalid_company_pairs$company.x
&companies_joined$company.y %in% df_invalid_company_pairs$company.y
, ]#& (df_invalid_company_pairs$company.y %in% companies_joined$com
for (i in 1:nrow(companies_joined)){
cat(companies_joined[companies_joined$company.x == df_invalid_company_pairs[i, "company.x"]])
break
}
df_invalid_company_pairs[i, "company.x"]
for (i in 1:nrow(companies_joined)){
cat(companies_joined[companies_joined$company.x == df_invalid_company_pairs[i, "company.x"],])
break
}
for (i in 1:nrow(companies_joined)){
print(companies_joined[
companies_joined$company.x == df_invalid_company_pairs[i, "company.x"]
&companies_joined$company.y == df_invalid_company_pairs[i, "company.y"]
,])
break
}
for (i in 1:nrow(companies_joined)){
print(companies_joined[
companies_joined$company.x == df_invalid_company_pairs[i, "company.x"]
&companies_joined$company.y == df_invalid_company_pairs[i, "company.y"]
,])
}
companies_joined_single_match <- companies_joined
for (i in 1:nrow(companies_joined)){
companies_joined_single_match <- companies_joined_single_match %>%
filter(company.x == df_invalid_company_pairs[i, "company.x"]
& company.y == df_invalid_company_pairs[i, "company.y"])
}
companies_joined_single_match
companies_joined_single_match <- companies_joined
for (i in 1:nrow(companies_joined)){
companies_joined_single_match <- companies_joined_single_match %>%
filter(company.x != df_invalid_company_pairs[i, "company.x"]
& company.y != df_invalid_company_pairs[i, "company.y"])
}
companies_joined_single_match <- companies_joined
for (i in 1:nrow(companies_joined)){
companies_joined_single_match <- companies_joined_single_match %>%
filter(company.x != df_invalid_company_pairs[i, "company.x"]
& company.y != df_invalid_company_pairs[i, "company.y"])
}
companies_joined_single_match
companies_joined_single_match
companies_joined
?anti_join
anti_join(companies_joined, df_invalid_company_pairs, by = c("company.x", "company.y"))
df_balance_sheet
df_balance_sheet[df_balance_sheet$company == "3M", ]
df_balance_sheet_interpol[df_balance_sheet_interpol$company == "3M", ]
companies_joined
companies_joined <-
stringdist_join(
unique(df_sales_no_dup_intepol[, "company"]),
unique(df_balance_sheet_interpol[, "company"]),
by = "company",
mode = "inner",
method = "jw",
max_dist = 0.25, # maximum Jaro-Winkler distance
ignore_case = TRUE,
distance_col = "distance"
)
# find companies that do have multiple matches
companies_multi_match <- companies_joined %>%
group_by(company.x) %>%
summarise(n=n()) %>%
filter(n > 1)
# show companies that have multiple matches, and manually delete non-matching pairs
companies_joined[companies_joined$company.x %in% companies_multi_match$company.x
,]
library(tidyverse)
#library(modeest)
library(zoo)
#library(ggplot2)
#library(corrplot)
# install lares correlation package from github
#devtools::install_github("laresbernardo/lares")
library(lares)
# install kssa time series interpolation package
#install.packages("kssa")
library(imputeTS)
#install.packages("lubridate")
library(lubridate)
library(caret)
install.packages("fuzzyjoin")
library(fuzzyjoin)
BASE_PATH <- "../data/processed"
SALES_PATH <- paste(BASE_PATH, "sales.csv", sep = "/")
BALANCE_SHEET_PATH <- paste(BASE_PATH, "balance_sheet.csv", sep = "/")
PROFIT_LOSS_PATH <- paste(BASE_PATH, "profit_loss.csv", sep = "/")
df_sales <- read_csv(SALES_PATH, show_col_types = FALSE)
df_sales <- df_sales[, -1] # remove index column
head(df_sales)
par(mfrow = c(2, 1))
hist(df_sales$interim_sales)
log_transform_with_constant <- function(series) {
series_min <- min(na.omit(series)) # na.omit to exclude Nan from minimum
if (series_min <= 0) {
constant <- 1 + series_min * -1
} else {
constant <- 0
}
series_transformed <- log(series + constant)
return(list("series_transformed" = series_transformed, "constant" = constant))
}
res.interim_sales_log <-
log_transform_with_constant(df_sales$interim_sales)
INTERIM_SALES_LOG_CONSTANT <- res.interim_sales_log$constant
hist(res.interim_sales_log$series_transformed)
df_sales$log.interim_sales <- res.interim_sales_log$series_transformed
cat(paste("Used constant for log transformation:", res.interim_sales_log$constant))
df_sales[df_sales$log.interim_sales < 12,]
df_sales <- df_sales[!df_sales$log.interim_sales < 12,]
hist(df_sales$log.interim_sales)
# perform duplicate elimation
cat(paste("Number of data points before deduplication step:", nrow(df_sales)), "\n")
df_sales_no_dup <- distinct(df_sales, .keep_all = TRUE)
cat(paste("Number of data points after deduplication step:", nrow(df_sales_no_dup)), "\n")
cat(paste(nrow(df_sales) - nrow(df_sales_no_dup)), " data points were removed.", "\n")
companies_before <- n_distinct(df_sales_no_dup$company)
# calculate observations per company
obs_per_company <-
df_sales_no_dup %>%
group_by(df_sales_no_dup$company) %>%
summarise(n_observations = n()) %>%
arrange(n_observations)
# rename column
colnames(obs_per_company)[1] <- "company"
n_min <- 40 # at least 5 years for training and 5 years for evaluation * 4 = 40
companies_to_exclude <- obs_per_company[obs_per_company$n_observations < n_min, ]$company
df_sales_no_dup <- df_sales_no_dup[!(df_sales_no_dup$company %in% companies_to_exclude),]
companies_after <- n_distinct(df_sales_no_dup$company)
cat(paste(companies_before - companies_after,
"companies were removed because of having less than", n_min, "observations\n"))
# create date from year and quarter
df_sales_no_dup$date <-
as.Date(as.yearqtr(paste0(df_sales_no_dup$year, "-", df_sales_no_dup$quarter), format = "%Y-%q"))
check_continuity <- function(df, obs_per_company){
# create new column that marks if ts is continuous,
# set to true for all companies in the beginning
obs_per_company$is_continous <- TRUE
for (company in unique(df$company)) {
# for each company
company_dates <- df[df$company == company,]$date
company_dates <- sort(company_dates) # select sorted dates
for (i in 1:(length(company_dates) - 1)) {
# for each date index
difference_in_days <-
as.integer(company_dates[i + 1] - company_dates[i])
# in case there are two months with 31 days in the quarter,
# the maximum valid difference in days is 92
if (difference_in_days > 92) {
obs_per_company[obs_per_company$company == company, "is_continous"] <-
FALSE
break
}
}
}
cat("Found",
paste(nrow(obs_per_company[obs_per_company$is_continous == FALSE, ])),
"companies that do not have a continous sales time series.")
return(obs_per_company)
}
obs_per_company <- check_continuity(df_sales_no_dup, obs_per_company)
# complete time series (i.e., create equidistant points) and interpolate missing values
df_sales_no_dup_intepol <-
df_sales_no_dup %>%
mutate(date =  as.Date(as.yearqtr(paste0(df_sales_no_dup$year, "-", df_sales_no_dup$quarter), format = "%Y-%q"))) %>%
group_by(company) %>%
complete(date = seq.Date(min(date), max(date), by="quarter")) %>%
mutate(log.interim_sales = na_interpolation(log.interim_sales, option = "spline")) %>%
ungroup()
# check continuity again
obs_per_company <- check_continuity(df_sales_no_dup_intepol, obs_per_company)
# the completion of the time series created missing values for some years and quarters,
# we will now employ the created date column to parse years and quarters.
df_sales_no_dup_intepol$quarter <- quarter(df_sales_no_dup_intepol$date)
df_sales_no_dup_intepol$year <- year(df_sales_no_dup_intepol$date)
# remove original interim sales
df_sales_no_dup_intepol <- subset(df_sales_no_dup_intepol, select=-c(interim_sales))
# check if previous steps were successful
colSums(is.na.data.frame(df_sales_no_dup_intepol))
head(df_sales_no_dup_intepol)
df_balance_sheet <- read_csv(BALANCE_SHEET_PATH, show_col_types = FALSE)
# fuzzy join company names of sales and balance sheet data frame
# needed because names are not similar for both tables
companies_joined <-
stringdist_join(
unique(df_sales_no_dup_intepol[, "company"]),
unique(df_balance_sheet_interpol[, "company"]),
by = "company",
mode = "inner",
method = "jw",
max_dist = 0.25, # maximum Jaro-Winkler distance
ignore_case = TRUE,
distance_col = "distance"
)
#install.packages("fuzzyjoin")
library(fuzzyjoin)
# fuzzy join company names of sales and balance sheet data frame
# needed because names are not similar for both tables
companies_joined <-
stringdist_join(
unique(df_sales_no_dup_intepol[, "company"]),
unique(df_balance_sheet_interpol[, "company"]),
by = "company",
mode = "inner",
method = "jw",
max_dist = 0.25, # maximum Jaro-Winkler distance
ignore_case = TRUE,
distance_col = "distance"
)
# find companies that do have multiple matches
companies_multi_match <- companies_joined %>%
group_by(company.x) %>%
summarise(n=n()) %>%
filter(n > 1)
library(dplyr)
# fuzzy join company names of sales and balance sheet data frame
# needed because names are not similar for both tables
companies_joined <-
stringdist_join(
unique(df_sales_no_dup_intepol[, "company"]),
unique(df_balance_sheet_interpol[, "company"]),
by = "company",
mode = "inner",
method = "jw",
max_dist = 0.25, # maximum Jaro-Winkler distance
ignore_case = TRUE,
distance_col = "distance"
)
# find companies that do have multiple matches
companies_multi_match <- companies_joined %>%
group_by(company.x) %>%
summarise(n=n()) %>%
filter(n > 1)
# show companies that have multiple matches, and manually delete non-matching pairs
companies_joined[companies_joined$company.x %in% companies_multi_match$company.x
,]
companies_joined %>% group_by(company.x) %>% slice_min(distance)
# fuzzy join company names of sales and balance sheet data frame
# needed because names are not similar for both tables
companies_joined <-
stringdist_join(
unique(df_sales_no_dup_intepol[, "company"]),
unique(df_balance_sheet_interpol[, "company"]),
by = "company",
mode = "inner",
method = "jw",
max_dist = 0.3, # maximum Jaro-Winkler distance
ignore_case = TRUE,
distance_col = "distance"
)
# find companies that do have multiple matches
companies_multi_match <- companies_joined %>%
group_by(company.x) %>%
summarise(n=n()) %>%
filter(n > 1)
# show companies that have multiple matches, and manually delete non-matching pairs
companies_joined[companies_joined$company.x %in% companies_multi_match$company.x
,]
companies_joined %>% group_by(company.x) %>% slice_min(distance)
companies_joined_best <-
companies_joined %>%
group_by(company.x) %>%
slice_min(distance)
companies_joined_best
unique(df_balance_sheet_interpol[, "company"])
unique(df_balance_sheet_interpol[, "company"]) %>% filter(starts_with("3"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith("3"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(., "3"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "3"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "3"))
companies_joined_best[companies_joined_best$company.x == "3M COMPANY", "company.y"] <- "3M"
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "A O"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "A O"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "A"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "AGIL"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "AG"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ALLEGION"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ALLE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ALLSTATE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "AMERICAN"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "AMERIP"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "AMERIPRISE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "AMPHE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ARCH"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ASSUR"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ASSU"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ASS"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "AS"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "A"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "BANK"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "BA"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "BERKSHIRE HATHAWAY"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "BIO-RAD LABORATORIES"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "BIO-RAD LABORA"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "CELANESE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "CEN"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "CHARLES"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "CH"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "CITIGROUP"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "CITI"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "COM"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "DEERE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "DEE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "DISCOVER"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "DISC"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "DI"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ELEVANCE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "ELE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "EQUITY"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "EVEREST"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "EVE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "EV"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "EV"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "FRAN"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "FR"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "GLO"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "HO"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "HU"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "INTU"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "IRO"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "JOH"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "META"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "MET"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "MO"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "NE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "PRIN"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "FIN"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "PRO"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "REG"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "SB"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "S"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "AL"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "SE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "SI"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "SV"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "T"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "TR"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "UNI"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "US"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "VER"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "VI"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "WE"))
unique(df_balance_sheet_interpol[, "company"]) %>% filter(startsWith(company, "WA"))
companies_joined_best[
companies_joined_best$company.x == "3M COMPANY", "company.y"] <- "3M"
# we will use ALPHABET A and not 'C', as this is the regular stock with voting rights
companies_joined_best[
companies_joined_best$company.x == "ALPHABET INC", "company.y"] <- "ALPHABET A"
companies_joined_best[
companies_joined_best$company.x == "DEERE & COMPANY", "company.y"] <- "DEERE"
companies_joined_best[
companies_joined_best$company.x == "NEWS CORP", "company.y"] <- "NEWS 'A'"
companies_joined_best[
companies_joined_best$company.x == "UNITED AIR", "company.y"] <- "UNITED AIRLINES HOLDINGS"
companies_joined_best[
companies_joined_best$company.x == "WEST PHARMACEUTICAL", "company.y"] <- "WEST PHARM.SVS."
companies_joined_best[
companies_joined_best$company.x == "WESTINGHOUSE AIR	", "company.y"] <- "WABTEC"
companies_not_resolvable <- c(
"A O SMITH CORP",
"AGILENT TECHNOLOGIES",
"ALLEGION PLC",
"ALLSTATE CORP",
"AMERICAN ELECTRIC",
"AMERICAN INT'L GROUP",
"AMERIPRISE FIN",
"AMPHENOL CORP",
"ARCH CAPITAL GROUP",
"ASSURANT INC",
"BANK OF NEW YORK",
"CELANESE CORPORATION",
"CENTENE CORP",
"CHARLES RIVER LAB",
"CHARLES SCHWAB CORP",
"CHUBB",
"CITIGROUP INC",
"COMERICA INC.",
"DISCOVER FINANCI",
"ELEVANCE HEALTH",
"EQUITY RESIDENTIAL",
"EVEREST RE GROUP",
"FRANKLIN RESOURCES",
"GLOBAL PAYMENTS INC",
"HOST HOTELS",
"HUMANA INC.",
"INTUIT INC",
"IRON MOUNTAIN INC",
"JOHNSON CONTROLS INT",
"META PLATFORMS INC",
"METLIFE INC",
"MOLINA HEALTHCARE",
"MORGAN STANLEY",
"PRINCIPAL FINL GROUP",
"PROGRESSIVE CORP",
"REGENCY CENTERS CORP",
"REGIONS FINANCIAL",
"SBA COMMUNICATIONS",
"SEAGATE TECHNOLOGY",
"SIGNATURE BANK",
"SVB FINANCIAL GROUP",
"TAKE",
"TEXTRON INC",
"TRAVELERS COS",
"UNITEDHEALTH GROUP",
"US BANCORP",
"VERISK ANALYTICS",
"VISA INC.",
)
companies_joined_best[
companies_joined_best$company.x == "3M COMPANY", "company.y"] <- "3M"
# we will use ALPHABET A and not 'C', as this is the regular stock with voting rights
companies_joined_best[
companies_joined_best$company.x == "ALPHABET INC", "company.y"] <- "ALPHABET A"
companies_joined_best[
companies_joined_best$company.x == "DEERE & COMPANY", "company.y"] <- "DEERE"
companies_joined_best[
companies_joined_best$company.x == "NEWS CORP", "company.y"] <- "NEWS 'A'"
companies_joined_best[
companies_joined_best$company.x == "UNITED AIR", "company.y"] <- "UNITED AIRLINES HOLDINGS"
companies_joined_best[
companies_joined_best$company.x == "WEST PHARMACEUTICAL", "company.y"] <- "WEST PHARM.SVS."
companies_joined_best[
companies_joined_best$company.x == "WESTINGHOUSE AIR	", "company.y"] <- "WABTEC"
companies_not_resolvable <- c(
"A O SMITH CORP",
"AGILENT TECHNOLOGIES",
"ALLEGION PLC",
"ALLSTATE CORP",
"AMERICAN ELECTRIC",
"AMERICAN INT'L GROUP",
"AMERIPRISE FIN",
"AMPHENOL CORP",
"ARCH CAPITAL GROUP",
"ASSURANT INC",
"BANK OF NEW YORK",
"CELANESE CORPORATION",
"CENTENE CORP",
"CHARLES RIVER LAB",
"CHARLES SCHWAB CORP",
"CHUBB",
"CITIGROUP INC",
"COMERICA INC.",
"DISCOVER FINANCI",
"ELEVANCE HEALTH",
"EQUITY RESIDENTIAL",
"EVEREST RE GROUP",
"FRANKLIN RESOURCES",
"GLOBAL PAYMENTS INC",
"HOST HOTELS",
"HUMANA INC.",
"INTUIT INC",
"IRON MOUNTAIN INC",
"JOHNSON CONTROLS INT",
"META PLATFORMS INC",
"METLIFE INC",
"MOLINA HEALTHCARE",
"MORGAN STANLEY",
"PRINCIPAL FINL GROUP",
"PROGRESSIVE CORP",
"REGENCY CENTERS CORP",
"REGIONS FINANCIAL",
"SBA COMMUNICATIONS",
"SEAGATE TECHNOLOGY",
"SIGNATURE BANK",
"SVB FINANCIAL GROUP",
"TAKE",
"TEXTRON INC",
"TRAVELERS COS",
"UNITEDHEALTH GROUP",
"US BANCORP",
"VERISK ANALYTICS",
"VISA INC."
)
companies_joined_clean <- companies_joined_best[!companies_joined_best$company.x %in% companies_not_resolvable,]
companies_joined_clean
